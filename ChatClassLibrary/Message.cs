using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ChatClassLibrary
{
    public enum MessageType
    {
        /// <summary>
        /// Control information.
        /// </summary>
        Control,
        /// <summary>
        /// Special message generated by the application.
        /// </summary>
        SystemMessage,
        /// <summary>
        /// Messages that the user typed and sent in a chatroom. (TargetId is a chatroom ID).
        /// </summary>
        UserGroupMessage,
        /// <summary>
        /// User messages sent between two users. (TargetId is another client's ID).
        /// </summary>
        UserPrivateMessage
    }
    
    public enum ControlInfo
    {
        None = 0x00,                     // 00 0000  Data message, not control message.
        ClientRequestConnection = 0x20,  // 10 0000  The client wants to connect to server.
        ConnectionAccepted = 0x10,       // 01 0000  The server accepted connection.
        ConnectionRejected = 0x11,       // 01 0001  The server rejected connection.

        RequestFileUpload = 0x2A,        // 10 1010  The client wants to upload a file to server.
        RequestFileDownload = 0x2B,      // 10 1011  The client wants to download a file from server.
        RequestGranted = 0x1C,           // 01 1100  The server allowed file upload/download.
        RequestDenied = 0x1D,            // 01 1101  The server rejected file transfer request.
        FileAvailable,  // A file has been uploaded; others can download.

        RequestClientList,
        RequestChatroomList,
        ClientList,             // Message containing a list of clients in a chatroom.
        ChatroomList,           // Message containing a list of chatrooms in the server.

        ClientJoinedChatroom,
        ClientLeftChatroom,

        RequestJoinChatroom,
        RequestCreateChatroom
    }

    // The structure of a message packet is:
    //
    //    |------------------ Fixed-length Header (45 bytes) --------------| |-- Data --|

    //    2-bit Message Type
    //     |    6-bit Control Code                      Time Sent (binary DateTime)
    //     |     |                                       |
    //   [ 1 1 , 0 0 0 0 0 0 | <16-byte> | <16-byte> | <8-byte> | <4-byte> || <variable> ]
    //                           |           |                      |           |
    //                  Sender GUID          |     Data Length (int32)          |
    //                     Target chatroom GUID              Data (actual message, optional)
    //
    //
    // The first byte is a combination of Message Type and Control Info.
    // In case of server-generated messages, the Sender GUID field is set to a special value, e.g. all zeroes.
    // The Data Length and Data fields can be missing (for some types of control message).
    // Packet length must be at least 45 bytes (header-only).
    //
    public class Message
    {
        private static Encoding TextEncoding => ChatProtocol.TextEncoding;

        /// <summary>
        /// Size of fixed-length header of all messages = 45 bytes.
        /// </summary>
        public static int HeaderLength => 1 + 16 + 16 + 8 + 4;

        /// <summary>
        /// Use as SenderID or TargetID when there's no need to be specific.
        /// </summary>
        public static Guid NullID => Guid.Empty;

        //--------------------------------------------------------------------------------------//
        #region Properties

        /// <summary>
        /// (2-bit) The type of the message.
        /// </summary>
        public MessageType Type { get; set; }

        /// <summary>
        /// (6-bit) The control code, if the message is not a data message.
        /// </summary>
        public ControlInfo ControlInfo { get; set; }

        /// <summary>
        /// (16-byte GUID) The client who send the message.
        /// </summary>
        public Guid SenderId { get; set; }

        /// <summary>
        /// (16-byte GUID) Chatroom that the message is sent to.
        /// </summary>
        public Guid TargetId { get; set; }

        /// <summary>
        /// (8-byte) The time the message was sent (right before writing on a network stream).
        /// </summary>
        public DateTime TimeSent { get; set; }

        /// <summary>
        /// (not included in packet) The time the message was read by the receiver.
        /// </summary>
        public DateTime TimeReceived { get; set; }

        /// <summary>
        /// (variable-length) The content of the message.
        /// </summary>
        public string Text { get; set; }

        public bool IsValid
            => !(this.Type == MessageType.Control && this.ControlInfo == ControlInfo.None);

        public bool IsSenderNull
            => this.SenderId == Message.NullID;

        #endregion
        //--------------------------------------------------------------------------------------//

        /// <summary>
        /// Convert a Message object into a byte array (to be sent over a network).
        /// Note: the Time Sent field is set to the time when the function is called. Can be
        /// updated later before sending with Message.UpdatePacketTimeStamp().
        /// </summary>
        /// <returns>A byte array representing the Message object.</returns>
        public byte[] BuildPacket()
        {
            byte[] packet = null;

            byte[] firstByte = { (byte) ((((int) this.Type) << 6) + ((int) this.ControlInfo)) };
            byte[] senderGuid = this.SenderId.ToByteArray();
            byte[] targetGuid = this.TargetId.ToByteArray();
            byte[] timeSent = Utility.ToByteArray(this.TimeSent.ToUniversalTime().ToBinary()); // Can be updated later.

            if (this.Text != null && this.Text.Length > 0)
            {
                byte[] data = TextEncoding.GetBytes(this.Text);
                byte[] dataLength = Utility.ToByteArray(data.Length);
                packet = Utility.Concat(firstByte, senderGuid, targetGuid, timeSent, dataLength, data);
            }
            else
            {
                byte[] dataLength = Utility.ToByteArray(0);
                packet = Utility.Concat(firstByte, senderGuid, targetGuid, timeSent, dataLength);
            }

            return packet;
        }

        /// <summary>
        /// Convert a byte array (read from a network stream) into a Message object.
        /// Note: this function does not check if the Text field of the packet is of the correct
        /// length as specified in the Data Length field. User can pass only the header of the
        /// packet here and then set the Text property themselves.
        /// </summary>
        /// <param name="packet">A byte array representing a Message object.</param>
        /// <returns>A Message object.</returns>
        public static Message FromPacket(byte[] packet)
        {
            if (packet.Length < HeaderLength) return null;  // Incorrect packet bytes (too short).

            int messageType = packet[0] >> 6;  // The higher 2 bits.
            int controlCode = packet[0] & 0x3F;  // The lower 6 bits.

            Guid senderGuid = new Guid(Utility.Slice(packet, 1, 16));
            Guid targetGuid = new Guid(Utility.Slice(packet, 1 + 16, 16));

            long timeSentLong = Utility.BytesToInt64(Utility.Slice(packet, 1 + 16 + 16, 8));
            DateTime timeSent = DateTime.FromBinary(timeSentLong).ToLocalTime();

            // All bytes after the header (if exist) are assumed to be part of the message text.
            string text = (packet.Length == HeaderLength) ? null
                        : TextEncoding.GetString(packet, HeaderLength, packet.Length - HeaderLength);

            return new Message
            {
                Type = (MessageType) messageType,
                ControlInfo = (ControlInfo) controlCode,
                SenderId = senderGuid,
                TargetId = targetGuid,
                TimeSent = timeSent,
                TimeReceived = DateTime.MinValue, // The receiver will set this.
                Text = text
            };
        }

        /// <summary>
        /// Update the Time Sent field of the byte packet to the specified value.
        /// </summary>
        /// <param name="packet">A byte array representing the Message object.</param>
        /// <param name="time">The time to be set in the Message's Time Sent field.</param>
        public static void UpdatePacketTimeStamp(byte[] packet, DateTime time)
        {
            byte[] timeSent = Utility.ToByteArray(time.ToUniversalTime().ToBinary());
            Array.Copy(timeSent, 0, packet, 33, 8); 
        }

        /// <summary>
        /// Update the Time Sent field of the byte packet to the current time.
        /// </summary>
        /// <param name="packet">A byte array representing the Message object.</param>
        public static void UpdatePacketTimeStamp(byte[] packet)
        {
            UpdatePacketTimeStamp(packet, DateTime.Now);
        }

        //--------------------------------------------------------------------------------------//
        
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendFormat("Message (T:{0}, CTRL:{1})\n", this.Type, this.ControlInfo);
            sb.Append("  - sender: ").Append(this.SenderId).AppendLine();
            sb.Append("  - target: ").Append(this.TargetId).AppendLine();
            sb.Append("  - time sent: ").Append(this.TimeSent).AppendLine();
            sb.Append("  - time recv: ").Append(this.TimeReceived).AppendLine();
            if (this.Text != null)
            {
                sb.Append("  - content: ").Append(this.Text).AppendLine();
                sb.Append("  - content length (bytes): ").Append(TextEncoding.GetByteCount(this.Text));
            }
            return sb.ToString();
        }


        static void Main(string[] args)
        {
            Message m = new Message
            {
                Type = MessageType.SystemMessage,
                ControlInfo = ControlInfo.ConnectionRejected,
                SenderId = Guid.NewGuid(),
                TargetId = Guid.NewGuid(),
                TimeSent = DateTime.Now,
                TimeReceived = DateTime.MinValue,
                Text = "Hello World"
            };
            byte[] b = m.BuildPacket();
            Message m2 = Message.FromPacket(b);
            Console.WriteLine(m);
            Console.WriteLine(m2);
            Console.Read();
        }

    }
}
